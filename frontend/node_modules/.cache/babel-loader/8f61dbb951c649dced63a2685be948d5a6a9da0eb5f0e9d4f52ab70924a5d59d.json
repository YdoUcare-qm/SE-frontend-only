{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'NewTicket',\n  data() {\n    return {\n      Categories: [],\n      // Array to store subscribed categories\n      selectedCategory: '',\n      // Currently selected category\n      tags: '',\n      title: '',\n      description: '',\n      topics: [],\n      websiteName: 'Dis.integrate'\n    };\n  },\n  created() {\n    // Fetch subscribed categories when component is created\n    this.fetchCategories();\n  },\n  methods: {\n    async fetchCategories() {\n      // Fetch subscribed categories from API\n      try {\n        const response = await fetch('http://localhost:5000/api/categories');\n        const data = await response.json();\n        this.Categories = data.category_list.categories;\n        console.log(data);\n      } catch (error) {\n        console.error('Error fetching subscribed categories:', error);\n      }\n    },\n    async fetchRecommendations() {\n      // Fetch recommendations based on selected category\n      try {\n        const response = await fetch('http://localhost:5000/api/topics', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: this.selectedCategory\n          })\n        });\n        const data = await response.json();\n        this.topics = data.topic_list.topics;\n        console.log(this.topics);\n        // Handle recommendations data\n      } catch (error) {\n        console.error('Error fetching recommendations:', error);\n      }\n    },\n    async submitTicket() {\n      try {\n        // Validate form fields\n        if (!this.title || !this.description || !this.selectedCategory || !this.tags) {\n          alert('Please fill in all fields');\n          return;\n        }\n        if (this.title.length < 20 || this.description.length < 20) {\n          alert('Title and description must be at least 20 characters long');\n          return;\n        }\n\n        // Disable submit button during API call\n        this.submitting = true;\n\n        // Make API call to submit new ticket\n        const response = await fetch('http://localhost:5000/api/user/newticket', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: this.title,\n            description: this.description,\n            category: this.selectedCategory,\n            creator: localStorage.getItem('id'),\n            tags: this.tags\n          })\n        });\n        const data = await response.json();\n        alert(data.message);\n\n        // Redirect to /mytickets after successful submission\n        this.$router.push('/mytickets');\n      } catch (error) {\n        console.error('Error submitting ticket:', error);\n        alert('Failed to submit ticket. Please try again later.');\n      } finally {\n        // Re-enable submit button after API call completes\n        this.submitting = false;\n      }\n    }\n  },\n  computed: {\n    formIsValid() {\n      // Check if all form fields are filled and title/description meet minimum character requirement\n      return this.selectedCategory && this.tags && this.title.length >= 20 && this.description.length >= 20;\n    }\n  }\n};","map":{"version":3,"names":["name","data","Categories","selectedCategory","tags","title","description","topics","websiteName","created","fetchCategories","methods","response","fetch","json","category_list","categories","console","log","error","fetchRecommendations","method","headers","body","JSON","stringify","id","topic_list","submitTicket","alert","length","submitting","category","creator","localStorage","getItem","message","$router","push","computed","formIsValid"],"sources":["/home/jeevan/Integration Testing/frontend/frontend/src/components/usercomponents/NewTicket.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Left-side navigation bar -->\r\n      <div class=\"sidebar\">\r\n        \r\n        <!-- Navigation links -->\r\n        <div class=\"navigation-links\">\r\n          <ul>\r\n            <li><a href=\"/userprofile\">Profile</a></li>\r\n            <li><a href=\"/userhome\">Home</a></li>\r\n            <li><a href=\"/mytickets\">My Tickets</a></li>\r\n            <li><a href=\"/newticket\">New Ticket</a></li>\r\n            <li><a href=\"/subscriptions\">Subscriptions</a></li>\r\n            <li><a href=\"/faq\">FAQs</a></li>\r\n            <li><a href=\"/usersettings\">Settings</a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"navbar\">\r\n            <div class=\"website-name\">{{ websiteName }}</div>\r\n            <router-link to=\"/\"><button @click=\"logoutUser\" class=\"logout-button\">Logout</button></router-link>\r\n            </div>\r\n\r\n      <!-- Main content area -->\r\n      <div class=\"main-content\">\r\n        <!-- Main user information section -->\r\n        \r\n          <!-- Navigation bar -->\r\n          \r\n          \r\n            <div class=\"new-ticket\">\r\n    <!-- Left side -->\r\n    <div class=\"left-side\">\r\n      <h2>Create New Ticket</h2>\r\n      <form @submit.prevent=\"submitTicket\">\r\n        <div class=\"form-group\">\r\n          <label for=\"category\">Category:</label>\r\n          <select v-model=\"selectedCategory\" @change=\"fetchRecommendations\" required>\r\n            <option value=\"\" disabled>Select category</option>\r\n            <option v-for=\"category in Categories\" :value=\"category.id\" :key=\"category.id\">{{ category.name }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"tags\">Tags:</label>\r\n          <input type=\"text\" v-model=\"tags\" id=\"tags\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">Title:</label>\r\n          <input type=\"text\" v-model=\"title\" id=\"title\" required minlength=\"20\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"description\">Description:</label>\r\n          <textarea v-model=\"description\" id=\"description\" required minlength=\"20\"></textarea>\r\n        </div>\r\n        <button type=\"submit\" :disabled=\"!formIsValid\">Submit</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n    <!-- Right side -->\r\n    <!-- Placeholder for now -->\r\n    <div class=\"right-content\">\r\n      <h2>Recommended Topics</h2>\r\n      <div class=\"topics-container\">\r\n        <router-link v-for=\"topic in topics\" :key=\"topic.id\" :to=\"`/topicposts/${topic.id}`\">\r\n          <div class=\"topic-tile\">\r\n            <div class=\"topic-title\">{{ topic.title }}</div>\r\n          </div>\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n  \r\n    \r\n        </div>   \r\n      </div>\r\n    \r\n  </template>\r\n  \r\n  <script>\r\nexport default {\r\n  name: 'NewTicket',\r\n\r\n  data() {\r\n    return {\r\n      Categories: [], // Array to store subscribed categories\r\n      selectedCategory: '', // Currently selected category\r\n      tags: '',\r\n      title: '',\r\n      description: '',\r\n      topics:[],\r\n      websiteName:'Dis.integrate'\r\n    };\r\n  },\r\n\r\n  created() {\r\n    // Fetch subscribed categories when component is created\r\n    this.fetchCategories();\r\n  },\r\n\r\n  methods: {\r\n    async fetchCategories() {\r\n      // Fetch subscribed categories from API\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/categories');\r\n        const data = await response.json();\r\n        this.Categories = data.category_list.categories;\r\n        console.log(data)\r\n      } catch (error) {\r\n        console.error('Error fetching subscribed categories:', error);\r\n      }\r\n    },\r\n\r\n    async fetchRecommendations() {\r\n      // Fetch recommendations based on selected category\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/topics', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ id: this.selectedCategory })\r\n        });\r\n        const data = await response.json();\r\n        \r\n        this.topics=data.topic_list.topics\r\n        console.log(this.topics)\r\n        // Handle recommendations data\r\n      } catch (error) {\r\n        console.error('Error fetching recommendations:', error);\r\n      }\r\n    },\r\n\r\n    async submitTicket() {\r\n      try {\r\n        // Validate form fields\r\n        if (!this.title || !this.description || !this.selectedCategory || !this.tags) {\r\n          alert('Please fill in all fields');\r\n          return;\r\n        }\r\n        if (this.title.length < 20 || this.description.length < 20) {\r\n          alert('Title and description must be at least 20 characters long');\r\n          return;\r\n        }\r\n\r\n        // Disable submit button during API call\r\n        this.submitting = true;\r\n\r\n        // Make API call to submit new ticket\r\n        const response = await fetch('http://localhost:5000/api/user/newticket', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            title: this.title,\r\n            description: this.description,\r\n            category: this.selectedCategory,\r\n            creator: localStorage.getItem('id'),\r\n            tags: this.tags\r\n          })\r\n        });\r\n        const data = await response.json();\r\n        alert(data.message);\r\n\r\n        // Redirect to /mytickets after successful submission\r\n        this.$router.push('/mytickets');\r\n      } catch (error) {\r\n        console.error('Error submitting ticket:', error);\r\n        alert('Failed to submit ticket. Please try again later.');\r\n      } finally {\r\n        // Re-enable submit button after API call completes\r\n        this.submitting = false;\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    formIsValid() {\r\n      // Check if all form fields are filled and title/description meet minimum character requirement\r\n      return this.selectedCategory && this.tags && this.title.length >= 20 && this.description.length >= 20;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* Left-side navigation bar styles */\r\n.sidebar {\r\n  width: 250px;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 200px;\r\n  left: 0;\r\n  background-color: #333;\r\n  color: #fff;\r\n  padding-top: 20px;\r\n}\r\n\r\n.navigation-links ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.navigation-links ul li {\r\n  padding: 10px 20px;\r\n}\r\n\r\n.navigation-links ul li a {\r\n  text-decoration: none;\r\n  color: #fff;\r\n}\r\n\r\n.navigation-links ul li a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Main content area styles */\r\n.main-content {\r\n  margin-left: 250px; /* Adjusted to match the width of the sidebar */\r\n  padding: 20px;\r\n  display: flex; /* Ensure left and right sides are displayed side by side */\r\n}\r\n\r\n/* Styles for navigation bar */\r\n.navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.website-name {\r\n  font-size: 20px;\r\n}\r\n\r\n.logout-button {\r\n  background-color: #ff6f61;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.logout-button:hover {\r\n  background-color: #e65346;\r\n}\r\n\r\n/* Left side styles */\r\n.left-side {\r\n  flex: 1; /* Take up the entire left half */\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n}\r\n\r\ninput[type=\"text\"],\r\nselect,\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-sizing: border-box; /* Ensure padding and border are included in width */\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Right side styles */\r\n.right-content {\r\n  flex: 1; /* Take up the entire right half */\r\n  padding: 20px;\r\n  max-height: 500px; /* Adjust height as needed */\r\n  overflow-y: auto; /* Enable vertical scrolling */\r\n}\r\n\r\n.topics-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.topic-tile {\r\n  width: 100%; /* Display only one tile in a row */\r\n  margin: 10px 0; /* Adjust margin for spacing */\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.topic-title {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n</style>\r\n  "],"mappings":";AA+EA,eAAe;EACbA,IAAI,EAAE,WAAW;EAEjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MAAE;MAChBC,gBAAgB,EAAE,EAAE;MAAE;MACtBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAC,EAAE;MACTC,WAAW,EAAC;IACd,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,eAAe,EAAE;EACxB,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,eAAeA,CAAA,EAAG;MACtB;MACA,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,sCAAsC,CAAC;QACpE,MAAMZ,IAAG,GAAI,MAAMW,QAAQ,CAACE,IAAI,EAAE;QAClC,IAAI,CAACZ,UAAS,GAAID,IAAI,CAACc,aAAa,CAACC,UAAU;QAC/CC,OAAO,CAACC,GAAG,CAACjB,IAAI;MAClB,EAAE,OAAOkB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAED,MAAMC,oBAAoBA,CAAA,EAAG;MAC3B;MACA,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAC/DQ,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,EAAE,EAAE,IAAI,CAACvB;UAAiB,CAAC;QACpD,CAAC,CAAC;QACF,MAAMF,IAAG,GAAI,MAAMW,QAAQ,CAACE,IAAI,EAAE;QAElC,IAAI,CAACP,MAAM,GAACN,IAAI,CAAC0B,UAAU,CAACpB,MAAK;QACjCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,MAAM;QACvB;MACF,EAAE,OAAOY,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IAED,MAAMS,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF;QACA,IAAI,CAAC,IAAI,CAACvB,KAAI,IAAK,CAAC,IAAI,CAACC,WAAU,IAAK,CAAC,IAAI,CAACH,gBAAe,IAAK,CAAC,IAAI,CAACC,IAAI,EAAE;UAC5EyB,KAAK,CAAC,2BAA2B,CAAC;UAClC;QACF;QACA,IAAI,IAAI,CAACxB,KAAK,CAACyB,MAAK,GAAI,EAAC,IAAK,IAAI,CAACxB,WAAW,CAACwB,MAAK,GAAI,EAAE,EAAE;UAC1DD,KAAK,CAAC,2DAA2D,CAAC;UAClE;QACF;;QAEA;QACA,IAAI,CAACE,UAAS,GAAI,IAAI;;QAEtB;QACA,MAAMnB,QAAO,GAAI,MAAMC,KAAK,CAAC,0CAA0C,EAAE;UACvEQ,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBpB,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBC,WAAW,EAAE,IAAI,CAACA,WAAW;YAC7B0B,QAAQ,EAAE,IAAI,CAAC7B,gBAAgB;YAC/B8B,OAAO,EAAEC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;YACnC/B,IAAI,EAAE,IAAI,CAACA;UACb,CAAC;QACH,CAAC,CAAC;QACF,MAAMH,IAAG,GAAI,MAAMW,QAAQ,CAACE,IAAI,EAAE;QAClCe,KAAK,CAAC5B,IAAI,CAACmC,OAAO,CAAC;;QAEnB;QACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MACjC,EAAE,OAAOnB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDU,KAAK,CAAC,kDAAkD,CAAC;MAC3D,UAAU;QACR;QACA,IAAI,CAACE,UAAS,GAAI,KAAK;MACzB;IACF;EACF,CAAC;EAEDQ,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ;MACA,OAAO,IAAI,CAACrC,gBAAe,IAAK,IAAI,CAACC,IAAG,IAAK,IAAI,CAACC,KAAK,CAACyB,MAAK,IAAK,EAAC,IAAK,IAAI,CAACxB,WAAW,CAACwB,MAAK,IAAK,EAAE;IACvG;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}