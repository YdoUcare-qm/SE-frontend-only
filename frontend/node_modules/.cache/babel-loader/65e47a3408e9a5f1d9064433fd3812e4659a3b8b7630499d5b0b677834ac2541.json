{"ast":null,"code":"export default {\n  name: 'NewTicket',\n  data() {\n    return {\n      subscribedCategories: [],\n      // Array to store subscribed categories\n      selectedCategory: '',\n      // Currently selected category\n      tags: '',\n      title: '',\n      description: ''\n    };\n  },\n  created() {\n    // Fetch subscribed categories when component is created\n    this.fetchSubscribedCategories();\n  },\n  methods: {\n    async fetchSubscribedCategories() {\n      // Fetch subscribed categories from API\n      try {\n        const response = await fetch('http://localhost:5000/api/user/subscribed_categories');\n        const data = await response.json();\n        this.subscribedCategories = data.categories;\n      } catch (error) {\n        console.error('Error fetching subscribed categories:', error);\n      }\n    },\n    async fetchRecommendations() {\n      // Fetch recommendations based on selected category\n      try {\n        const response = await fetch('http://localhost:5000/api/user/recommendations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            category_id: this.selectedCategory\n          })\n        });\n        const data = await response.json();\n        console.log(data);\n        // Handle recommendations data\n      } catch (error) {\n        console.error('Error fetching recommendations:', error);\n      }\n    },\n    submitTicket() {\n      // Implement ticket submission logic\n    }\n  },\n  computed: {\n    formIsValid() {\n      // Check if all form fields are filled and title/description meet minimum character requirement\n      return this.selectedCategory && this.tags && this.title.length >= 20 && this.description.length >= 20;\n    }\n  }\n};","map":{"version":3,"names":["name","data","subscribedCategories","selectedCategory","tags","title","description","created","fetchSubscribedCategories","methods","response","fetch","json","categories","error","console","fetchRecommendations","method","headers","body","JSON","stringify","category_id","log","submitTicket","computed","formIsValid","length"],"sources":["/home/jeevan/Integration Testing/frontend/frontend/src/components/usercomponents/NewTicket.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Left-side navigation bar -->\r\n      <div class=\"sidebar\">\r\n        \r\n        <!-- Navigation links -->\r\n        <div class=\"navigation-links\">\r\n          <ul>\r\n            <li><a href=\"/userprofile\">Profile</a></li>\r\n            <li><a href=\"/userhome\">Home</a></li>\r\n            <li><a href=\"/mytickets\">My Tickets</a></li>\r\n            <li><a href=\"/newticket\">New Ticket</a></li>\r\n            <li><a href=\"/subscriptions\">Subscriptions</a></li>\r\n            <li><a href=\"/faq\">FAQs</a></li>\r\n            <li><a href=\"/usersettings\">Settings</a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Main content area -->\r\n      <div class=\"main-content\">\r\n        <!-- Main user information section -->\r\n        \r\n          <!-- Navigation bar -->\r\n          <div class=\"navbar\">\r\n            <div class=\"website-name\">{{ websiteName }}</div>\r\n            <router-link to=\"/\"><button @click=\"logoutUser\" class=\"logout-button\">Logout</button></router-link>\r\n            </div>\r\n          \r\n            <div class=\"new-ticket\">\r\n    <!-- Left side -->\r\n    <div class=\"left-side\">\r\n      <h2>Create New Ticket</h2>\r\n      <form @submit.prevent=\"submitTicket\">\r\n        <div class=\"form-group\">\r\n          <label for=\"category\">Category:</label>\r\n          <select v-model=\"selectedCategory\" @change=\"fetchRecommendations\" required>\r\n            <option value=\"\" disabled>Select category</option>\r\n            <option v-for=\"category in subscribedCategories\" :value=\"category.id\" :key=\"category.id\">{{ category.name }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"tags\">Tags:</label>\r\n          <input type=\"text\" v-model=\"tags\" id=\"tags\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">Title:</label>\r\n          <input type=\"text\" v-model=\"title\" id=\"title\" required minlength=\"20\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"description\">Description:</label>\r\n          <textarea v-model=\"description\" id=\"description\" required minlength=\"20\"></textarea>\r\n        </div>\r\n        <button type=\"submit\" :disabled=\"!formIsValid\">Submit</button>\r\n      </form>\r\n    </div>\r\n    <!-- Right side -->\r\n    <!-- Placeholder for now -->\r\n    <div class=\"right-side\"></div>\r\n  </div>\r\n    \r\n        </div>   \r\n      </div>\r\n    \r\n  </template>\r\n  \r\n  <script>\r\nexport default {\r\n  name: 'NewTicket',\r\n\r\n  data() {\r\n    return {\r\n      subscribedCategories: [], // Array to store subscribed categories\r\n      selectedCategory: '', // Currently selected category\r\n      tags: '',\r\n      title: '',\r\n      description: ''\r\n    };\r\n  },\r\n\r\n  created() {\r\n    // Fetch subscribed categories when component is created\r\n    this.fetchSubscribedCategories();\r\n  },\r\n\r\n  methods: {\r\n    async fetchSubscribedCategories() {\r\n      // Fetch subscribed categories from API\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/user/subscribed_categories');\r\n        const data = await response.json();\r\n        this.subscribedCategories = data.categories;\r\n      } catch (error) {\r\n        console.error('Error fetching subscribed categories:', error);\r\n      }\r\n    },\r\n\r\n    async fetchRecommendations() {\r\n      // Fetch recommendations based on selected category\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/user/recommendations', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ category_id: this.selectedCategory })\r\n        });\r\n        const data = await response.json();\r\n        console.log(data)\r\n        // Handle recommendations data\r\n      } catch (error) {\r\n        console.error('Error fetching recommendations:', error);\r\n      }\r\n    },\r\n\r\n    submitTicket() {\r\n      // Implement ticket submission logic\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    formIsValid() {\r\n      // Check if all form fields are filled and title/description meet minimum character requirement\r\n      return this.selectedCategory && this.tags && this.title.length >= 20 && this.description.length >= 20;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n  <style scoped>\r\n  /* Left-side navigation bar styles */\r\n  /* Styles for NewTicket component */\r\n.new-ticket {\r\n  display: flex;\r\n}\r\n\r\n.left-side {\r\n  flex: 1;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n}\r\n\r\ninput[type=\"text\"],\r\nselect,\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-sizing: border-box; /* Ensure padding and border are included in width */\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.right-side {\r\n  flex: 1;\r\n  padding: 20px;\r\n}\r\n\r\n  .sidebar {\r\n    width: 250px;\r\n    height: 100%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: #333;\r\n    color: #fff;\r\n    padding-top: 20px;\r\n  }\r\n  \r\n  .navigation-links ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  \r\n  .navigation-links ul li {\r\n    padding: 10px 20px;\r\n  }\r\n  \r\n  .navigation-links ul li a {\r\n    text-decoration: none;\r\n    color: #fff;\r\n  }\r\n  \r\n  .navigation-links ul li a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  \r\n  /* Main content area styles */\r\n  .main-content {\r\n    margin-left: 250px; /* Adjusted to match the width of the sidebar */\r\n    padding: 20px;\r\n  }\r\n  \r\n  /* Styles for navigation bar */\r\n  .navbar {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    background-color: #f0f0f0;\r\n  }\r\n  \r\n  .website-name {\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .logout-button {\r\n    background-color: #ff6f61;\r\n    border: none;\r\n    color: white;\r\n    padding: 10px 20px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  .logout-button:hover {\r\n    background-color: #e65346;\r\n  }\r\n  \r\n  </style>\r\n  "],"mappings":"AAmEA,eAAe;EACbA,IAAI,EAAE,WAAW;EAEjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,oBAAoB,EAAE,EAAE;MAAE;MAC1BC,gBAAgB,EAAE,EAAE;MAAE;MACtBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,yBAAyB,EAAE;EAClC,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,yBAAyBA,CAAA,EAAG;MAChC;MACA,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,sDAAsD,CAAC;QACpF,MAAMV,IAAG,GAAI,MAAMS,QAAQ,CAACE,IAAI,EAAE;QAClC,IAAI,CAACV,oBAAmB,GAAID,IAAI,CAACY,UAAU;MAC7C,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAED,MAAME,oBAAoBA,CAAA,EAAG;MAC3B;MACA,IAAI;QACF,MAAMN,QAAO,GAAI,MAAMC,KAAK,CAAC,gDAAgD,EAAE;UAC7EM,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,WAAW,EAAE,IAAI,CAACnB;UAAiB,CAAC;QAC7D,CAAC,CAAC;QACF,MAAMF,IAAG,GAAI,MAAMS,QAAQ,CAACE,IAAI,EAAE;QAClCG,OAAO,CAACQ,GAAG,CAACtB,IAAI;QAChB;MACF,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IAEDU,YAAYA,CAAA,EAAG;MACb;IAAA;EAEJ,CAAC;EAEDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ;MACA,OAAO,IAAI,CAACvB,gBAAe,IAAK,IAAI,CAACC,IAAG,IAAK,IAAI,CAACC,KAAK,CAACsB,MAAK,IAAK,EAAC,IAAK,IAAI,CAACrB,WAAW,CAACqB,MAAK,IAAK,EAAE;IACvG;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}